#!/usr/bin/env python3
"""
Teste para verificar se a aplica√ß√£o compilada tem todos os m√≥dulos necess√°rios
"""
import os
import subprocess
import sys


def test_compiled_app():
    """Testa se a aplica√ß√£o compilada funciona"""
    print("üß™ Testando aplica√ß√£o compilada...")
    
    app_path = "/Users/fredchevitarese/Projetos/u2be_down/dist/U2Be Down.app/Contents/MacOS/U2Be Down"
    
    if not os.path.exists(app_path):
        print("‚ùå Aplica√ß√£o compilada n√£o encontrada")
        return False
    
    print(f"üìÅ Aplica√ß√£o encontrada: {app_path}")
    
    # Tenta executar a aplica√ß√£o em modo test (se poss√≠vel)
    try:
        # Executa com timeout para evitar travamento
        result = subprocess.run(
            [app_path, "--help"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        
        print(f"üì§ Return code: {result.returncode}")
        if result.stdout:
            print(f"üì§ Stdout: {result.stdout}")
        if result.stderr:
            print(f"üì§ Stderr: {result.stderr}")
            
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout - aplica√ß√£o pode estar funcionando (sem --help)")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao executar: {e}")
        return False

def check_app_bundle():
    """Verifica a estrutura do bundle da aplica√ß√£o"""
    print("\nüß™ Verificando estrutura do bundle...")
    
    bundle_path = "/Users/fredchevitarese/Projetos/u2be_down/dist/U2Be Down.app"
    
    if not os.path.exists(bundle_path):
        print("‚ùå Bundle n√£o encontrado")
        return False
    
    # Verifica estrutura
    contents_path = os.path.join(bundle_path, "Contents")
    macos_path = os.path.join(contents_path, "MacOS")
    resources_path = os.path.join(contents_path, "Resources")
    
    print(f"üìÅ Contents: {'‚úÖ' if os.path.exists(contents_path) else '‚ùå'}")
    print(f"üìÅ MacOS: {'‚úÖ' if os.path.exists(macos_path) else '‚ùå'}")
    print(f"üìÅ Resources: {'‚úÖ' if os.path.exists(resources_path) else '‚ùå'}")
    
    # Lista arquivos principais
    if os.path.exists(macos_path):
        macos_files = os.listdir(macos_path)
        print(f"üìÑ Arquivos MacOS: {macos_files}")
    
    if os.path.exists(resources_path):
        resources_files = os.listdir(resources_path)[:5]  # Primeiros 5
        print(f"üìÑ Arquivos Resources (sample): {resources_files}")
    
    return True

def check_console_logs():
    """Verifica se h√° logs no Console.app"""
    print("\nüí° Para debug adicional:")
    print("1. Abra Console.app (Applications > Utilities)")
    print("2. Execute a aplica√ß√£o U2Be Down")
    print("3. Procure por logs de erro relacionados ao U2Be Down")
    print("4. Tamb√©m verifique crash reports em ~/Library/Logs/DiagnosticReports/")

if __name__ == "__main__":
    print("üß™ Debug da Aplica√ß√£o Compilada")
    print("=" * 50)
    
    bundle_ok = check_app_bundle()
    app_ok = test_compiled_app()
    
    print("\n" + "=" * 50)
    if bundle_ok and app_ok:
        print("‚úÖ Estrutura da aplica√ß√£o parece correta")
        print("üí° O problema pode estar em:")
        print("   - Permiss√µes do macOS")
        print("   - M√≥dulos faltando")
        print("   - Configura√ß√£o do yt-dlp")
    else:
        print("‚ùå H√° problemas na estrutura da aplica√ß√£o")
    
    check_console_logs()
